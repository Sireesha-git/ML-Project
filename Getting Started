import sys 
print("Python: {}".format(sys.version))
import scipy
print("scipy: {}".format(scipy.__version__))
import numpy
print("numpy: {}".format(numpy.__version__))
import matplotlib
print("matploylib: {}".format(matplotlib.__version__))
import pandas
print("Pandas: {}".format(pandas.__version__))
import sklearn
print("sklearn: {}".format(sklearn.__version__))
import pandas
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier
#dimensions of the data set
print(dataset.shape)
#take a peek at the dta
print(dataset.head(20))
#statistical summaey
print(dataset.describe())
#class distribution
print(dataset.groupby('class').size())
#univariste plots -box and whisker plots
dataset.plot(kind='box',subplots=True,layout=(2,2),sharex=False,sharey=False)
pyplot.show()
#histogram of the variable
dataset.hist()
pyplot.show()
#multi variate plots
scatter_matrix(dataset)
pyplot.show()
#creating a validation dataset
#split dataset
array =dataset.values
X=array[:,0:4]
y=array[:, 4]
X_train,X_validation,Y_train,Y_validation=train_test_split(X,y,test_size=0.2,random_state=1)
#logistic regression
#linear discreminant analysis
#k-nearest neighbors
#classification and regression tress
#gaussian naive bayes
#support vector machines


#building models
models=[]
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC(gamma='auto')))
#evaluates the created models
results=[]
names=[]
for name,model in models:
    kfold=StratifiedKFold(n_splits=10,random_state=1)
    cv_results=cross_val_score(model,X_train,Y_train,cv=kfold,scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s: %f (%f)' % (name,cv_results.mean(),cv_results.std()))
 #compare
pyplot.boxplot(results,labels=names)
pyplot.title('Algorithm Comparison')
pyplot.show()
#make predictons on svm
model=SVC(gamma='auto')
model.fit(X_train,Y_train)
predictions=model.predict(X_validation)
#evaluate our predictions
print(accuracy_score(Y_validation,predictions))
print(confusion_matrix(Y_validation,predictions))
print(classification_report(Y_validation,predictions))
